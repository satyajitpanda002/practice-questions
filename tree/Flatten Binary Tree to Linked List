// link - https://leetcode.com/problems/flatten-binary-tree-to-linked-list/

// reference - https://takeuforward.org/data-structure/flatten-binary-tree-to-linked-list/




class Solution {
public:
    void flatten(TreeNode* root) {
        stack<TreeNode *>st;
        if(!root)
            return;
        st.push(root);
        while(!st.empty())
        {
            TreeNode *p=st.top();
            st.pop();
            if(p->right)
                st.push(p->right);
            if(p->left)
                st.push(p->left);
            if(!st.empty())
                p->right=st.top();
            p->left=0;
        }
    }
};


// morris method - most optimized -  ime - O(N), space 0


class Solution {
public:
    void flatten(TreeNode* root) {
        TreeNode *curr=root;
        while(curr)
        {
            if(curr->left)
            {
                TreeNode *pre=curr->left;
                while(pre->right)
                    pre=pre->right;
                pre->right=curr->right;
                curr->right=curr->left;
                curr->left=0;
            }
            curr=curr->right;
        }
    }
};
