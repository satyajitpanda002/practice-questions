// link - https://practice.geeksforgeeks.org/problems/sort-an-array-of-0s-1s-and-2s4231/1

// approach - 1 ::  sort the array   O(nlogn) time
// 2 :: count sorting, store the 0,1 nd 2 count, at last update the array   o(1) time but with two time traversal
// 3 :: dutch national flag problem - take 3 pointer  low,mid and high,    low=0,mid=0 and high=n-1
// make all the 0s to the left side of low, all the 2s to the right side of high   O(n) with one time traversal only

// 2nd approach code

class Solution
{
    public:
    void sort012(int a[], int n)
    {
        // coode here 
        int c0=0,c1=0,c2=0;
        for(int i=0;i<n;i++)
        {
            if(a[i]==0)
                c0++;
            else if(a[i]==1)
                c1++;
            else
                c2++;
            
        }
        c1+=c0;
        c2+=c1;
        int i=0;
        while(i<c0)
        {
            a[i]=0;
            i++;
        }
        while(i>=c0 and i<c1)
        {
            a[i]=1;
            i++;
        }
        while(i>=c1 and i<c2)
        {
            a[i]=2;
            i++;
        }
    }
    
};






// optimized approach code - 


class Solution
{
    public:
    void sort012(int a[], int n)
    {
        // code here 
        int low=0,mid=0,high=n-1;
        while(mid<=high)
        {
            if(a[mid]==0)
            {
                swap(a[low],a[mid]);
                low++;
                mid++;
            }
            else if(a[mid]==1)
            {
                mid++;
            }
            else
            {
                swap(a[mid],a[high]);
                high--;
            }
        }
    }
    
};
