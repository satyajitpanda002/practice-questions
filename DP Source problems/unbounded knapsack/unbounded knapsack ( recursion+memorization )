#include"bits/stdc++.h"
using namespace std;
int dp[1001][1001];

int solve(int wt[],int profit[],int n,int w)
{
    if(n==0 || w==0)
        return 0;
    if(dp[n][w]!=-1)
        return dp[n][w];
    if(wt[n-1]<=w)
        return dp[n][w]=max(profit[n-1]+solve(wt,profit,n,w-wt[n-1]),solve(wt,profit,n-1,w));
    else
        return solve(wt,profit,n-1,w);
}

int main()
{
    memset(dp,-1,sizeof(dp));
    int n;
    cout<<"enter array size"<<endl;
    cin>>n;
    int wt[n],profit[n],w;
    cout<<"enter knapsack capacity"<<endl;
    cin>>w;
    cout<<"enter weight array"<<endl;
    for(int i=0;i<n;i++)
        cin>>wt[i];
    cout<<"enter profit array"<<endl;
    for(int i=0;i<n;i++)
        cin>>profit[i];
    int res=solve(wt,profit,n,w);
    cout<<res<<endl;
    return 0;
}
