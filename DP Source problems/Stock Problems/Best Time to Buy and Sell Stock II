/*
You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.
*/

// ques link -  https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/



//recursion + memorization

class Solution {
    int arr[30003][2];
    int solve(int ind,int buy_flag,vector<int>& prices)
    {
        if(ind==prices.size())
            return 0;
        if(arr[ind][buy_flag]!=-1)
            return arr[ind][buy_flag];
        int profit;
        if(buy_flag)
        {
            profit=max(-prices[ind]+solve(ind+1,0,prices),solve(ind+1,1,prices));
        }
        else
            profit=max(prices[ind]+solve(ind+1,1,prices),solve(ind+1,0,prices));
        
        return arr[ind][buy_flag]=profit;
    }
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        memset(arr,-1,sizeof arr);

        if(n==1)
            return 0;
        return solve(0,1,prices);
    }
};


// tabulation


class Solution {
    int arr[30001][2]={0};
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        arr[n][0]=arr[n][1]=0;
        
        for(int i=n-1;i>=0;i--)
        {
            for(int j=0;j<=1;j++)
            {
                if(j)
                {
                    arr[i][j]=max(-prices[i]+arr[i+1][0],arr[i+1][1]);
                }
                else
                {
                    arr[i][j]=max(prices[i]+arr[i+1][1],arr[i+1][0]);
                }
            }
        }
        return arr[0][1];
    }
};






















