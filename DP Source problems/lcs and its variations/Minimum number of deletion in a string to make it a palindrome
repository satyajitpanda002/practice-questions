// question - minimum number of deletions ina string to make it a palindrome
// approach - find the length of longest palindromic subsequence present in it
// then find the difference between the original string length and the palindromic subsqunce length
// palindromic subsequence finding method : LCS between given string and reverse of given string

#include"bits/stdc++.h"
using namespace std;

int solve(string x,string y,int m,int n)
{
    int dp[m+1][n+1];

    for(int i=0;i<=n;i++)
        dp[0][i]=0;
    for(int i=0;i<=m;i++)
        dp[i][0]=0;

    for(int i=1;i<=m;i++)
    {
        for(int j=1;j<=n;j++)
        {
            if(x[i-1]==y[j-1])
                dp[i][j]=1+dp[i-1][j-1];
            else
                dp[i][j]=max(dp[i][j-1],dp[i-1][j]);
        }
    }
    return dp[m][n];
}

int main()
{
    string x,y;
    cout<<"enter the string"<<endl;
    cin>>x;
    y=x;
    reverse(y.begin(),y.end());
    cout<<x.length()-solve(x,y,x.length(),y.length())<<endl;
    return 0;
}
