// dp solution

// question - sequence pattern matching
//            Is string a is present in string b as a subsequence

#include"bits/stdc++.h"
using namespace std;

int solve(string x,string y,int m,int n)
{
    int dp[m+1][n+1];
    for(int i=0;i<=n;i++)
        dp[0][i]=0;
    for(int i=0;i<=m;i++)
        dp[i][0]=0;

    for(int i=1;i<=m;i++)
    {
        for(int j=1;j<=n;j++)
        {
            if(x[i-1]==y[j-1])
                dp[i][j]=1+dp[i-1][j-1];
            else
                dp[i][j]=max(dp[i][j-1],dp[i-1][j]);
        }
    }
    return dp[m][n];
}

int main()
{
    string a,b;
    cout<<"enter the strings"<<endl;
    cin>>a>>b;

    int r=solve(a,b,a.length(),b.length());
    if(r==a.length())
        cout<<true<<endl;
    else
        cout<<false<<endl;
    return 0;
}

____________________________________________________________________________________________________________________________________________________
----------------------------------------------------------------------------------------------------------------------------------------------------




// another brute force approach

#include"bits/stdc++.h"
using namespace std;

void solve(string x,string y,int m,int n)
{
    int i=0,j=0;
    while(i<m && j<n)
    {
        if(x[i]==y[j])
        {
            i++;
            j++;
        }
        else
            j++;
    }

    if(i==m)
        cout<<true<<endl;
    else
        cout<<false<<endl;
}

int main()
{
    string a,b;
    cout<<"enter the strings"<<endl;
    cin>>a>>b;

    solve(a,b,a.length(),b.length());

    return 0;
}
